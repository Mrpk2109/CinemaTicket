/// <reference types="node" />
import { OverpassEndpoint } from "./endpoint";
import { OverpassQuery } from "./common";
import type { OverpassJson } from "./types";
import type { Readable } from "stream";
export interface OverpassManagerOptions {
    endpoints: string | string[];
    verbose: boolean;
    numRetries: number;
    retryPause: number;
    maxSlots: number;
}
export declare class OverpassManager {
    opts: OverpassManagerOptions;
    endpoints: OverpassEndpoint[];
    endpointsInitialized: boolean;
    constructor(opts?: Partial<OverpassManagerOptions>);
    _query(query: OverpassQuery): Promise<Response | OverpassJson | string | Readable | ReadableStream | null>;
    query(query: string | Partial<OverpassQuery>): Promise<Response>;
    queryJson(query: string | Partial<OverpassQuery>): Promise<OverpassJson>;
    queryXml(query: string | Partial<OverpassQuery>): Promise<string>;
    queryCsv(query: string | Partial<OverpassQuery>): Promise<string>;
    queryStream(query: string | Partial<OverpassQuery>): Promise<Readable | ReadableStream | null>;
    _getAvailableEndpoint(): OverpassEndpoint | null;
}
