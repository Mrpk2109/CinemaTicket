import type { OverpassApiStatus } from "./status";
import type { OverpassJson } from "./types";
import type { Readable } from "stream";
import { OverpassError } from "./common";
import "isomorphic-fetch";
export interface OverpassOptions {
    /**
     * Overpass API endpoint URL (usually ends in /interpreter)
     */
    endpoint: string;
    /**
     * Output verbose query information
     */
    verbose: boolean;
    /**
     * User-agent to send on Overpass Request
     */
    userAgent: string;
}
export declare const defaultOverpassOptions: OverpassOptions;
export declare const overpass: (query: string, overpassOpts?: Partial<OverpassOptions>) => Promise<Response>;
export declare const overpassJson: (query: string, opts?: Partial<OverpassOptions>) => Promise<OverpassJson>;
export declare const overpassXml: (query: string, opts?: Partial<OverpassOptions>) => Promise<string>;
export declare const overpassCsv: (query: string, opts?: Partial<OverpassOptions>) => Promise<string>;
export declare const overpassStream: (query: string, opts?: Partial<OverpassOptions>) => Promise<Readable | ReadableStream | null>;
export declare class OverpassRateLimitError extends OverpassError {
    apiStatus: OverpassApiStatus | null;
    constructor(apiStatus?: OverpassApiStatus | null);
}
export declare class OverpassBadRequestError extends OverpassError {
    errors: string[];
    query: string;
    constructor(query: string, errors: string[]);
}
export declare class OverpassRuntimeError extends OverpassError {
    errors: string[];
    constructor(errors: string[]);
}
export declare class OverpassGatewayTimeoutError extends OverpassError {
    constructor();
}
