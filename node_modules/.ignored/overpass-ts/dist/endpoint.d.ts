/// <reference types="node" />
import { OverpassApiStatus } from "./status";
import { OverpassJson } from "./types";
import { OverpassQuery } from "./common";
import type { Readable } from "stream";
interface OverpassEndpointOptions {
    gatewayTimeoutPause: number;
    rateLimitPause: number;
    minRequestInterval: number;
    maxSlots: number;
    verbose: boolean;
}
export declare class OverpassEndpoint {
    statusTimeout: NodeJS.Timeout | null;
    status: OverpassApiStatus | null | false;
    statusAvailable: boolean;
    opts: OverpassEndpointOptions;
    queue: OverpassQuery[];
    queueIndex: number;
    queueRunning: number;
    uri: URL;
    constructor(uri: string, opts?: Partial<OverpassEndpointOptions>);
    updateStatus(): Promise<void>;
    _query(queryObj: OverpassQuery): Promise<Response | OverpassJson | string | Readable | ReadableStream | null>;
    query(query: string | Partial<OverpassQuery>): Promise<Response>;
    queryJson(query: string | Partial<OverpassQuery>): Promise<OverpassJson>;
    queryXml(query: string | Partial<OverpassQuery>): Promise<string>;
    queryCsv(query: string | Partial<OverpassQuery>): Promise<string>;
    queryStream(query: string | Partial<OverpassQuery>): Promise<Readable | ReadableStream | null>;
    _sendQuery(query: OverpassQuery): Promise<Response>;
    getRateLimit(): number;
    getSlotsAvailable(): number;
}
export {};
